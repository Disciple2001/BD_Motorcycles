"use strict";
const { contextBridge, ipcRenderer } = require("electron");
contextBridge.exposeInMainWorld("electronAPI", {
  setTitle: (title) => ipcRenderer.send("set-title", title),
  get_marcas: () => ipcRenderer.invoke("get:Marcas"),
  get_marca: (id) => ipcRenderer.invoke("get:Marca", id),
  update_marca: (id, marca) => ipcRenderer.invoke("update:Marca", id, marca),
  create_marca: (marca) => ipcRenderer.invoke("create:Marca", marca),
  delete_marca: (id) => ipcRenderer.invoke("delete:Marca", id),
  get_roles: () => ipcRenderer.invoke("get:Roles"),
  get_rol: (id) => ipcRenderer.invoke("get:Rol", id),
  update_rol: (id, rol) => ipcRenderer.invoke("update:Rol", id, rol),
  create_rol: (rol) => ipcRenderer.invoke("create:Rol", rol),
  delete_rol: (id) => ipcRenderer.invoke("delete:Rol", id),
  get_usuarios: () => ipcRenderer.invoke("get:Usuarios"),
  get_usuario: (id) => ipcRenderer.invoke("get:Usuario", id),
  confirm_usuario: (usuario) => ipcRenderer.invoke("confirm:Usuario", usuario),
  update_usuario: (id, usuario) => ipcRenderer.invoke("update:Usuario", id, usuario),
  create_usuario: (usuario) => ipcRenderer.invoke("create:Usuario", usuario),
  delete_usuario: (id) => ipcRenderer.invoke("delete:Usuario", id),
  get_municipios: () => ipcRenderer.invoke("get:Municipios"),
  get_municipio: (id) => ipcRenderer.invoke("get:Municipio", id),
  update_municipio: (id, municipio) => ipcRenderer.invoke("update:Municipio", id, municipio),
  create_municipio: (municipio) => ipcRenderer.invoke("create:Municipio", municipio),
  delete_municipio: (id) => ipcRenderer.invoke("delete:Municipio", id),
  get_modelos: () => ipcRenderer.invoke("get:Modelos"),
  get_modelos_marca: (id) => ipcRenderer.invoke("get:ModelosMarca", id),
  get_modelo: (id) => ipcRenderer.invoke("get:Modelo", id),
  update_modelo: (id, modelo) => ipcRenderer.invoke("update:Modelo", id, modelo),
  create_modelo: (modelo) => ipcRenderer.invoke("create:Modelo", modelo),
  delete_modelo: (id) => ipcRenderer.invoke("delete:Modelo", id),
  get_motos: () => ipcRenderer.invoke("get:Motos"),
  get_motosDisponibles: () => ipcRenderer.invoke("get:MotosDisponibles"),
  get_moto: (id) => ipcRenderer.invoke("get:Moto", id),
  update_moto: (id, moto) => ipcRenderer.invoke("update:Moto", id, moto),
  create_moto: (moto) => ipcRenderer.invoke("create:Moto", moto),
  delete_moto: (id) => ipcRenderer.invoke("delete:Moto", id),
  get_contratos: () => ipcRenderer.invoke("get:Contratos"),
  get_contrato: (id) => ipcRenderer.invoke("get:Contrato", id),
  get_contratosDeCliente: (id) => ipcRenderer.invoke("get:ContratosDeCliente", id),
  update_contrato: (id, contrato) => ipcRenderer.invoke("update:Contrato", id, contrato),
  create_contrato: (contrato) => ipcRenderer.invoke("create:Contrato", contrato),
  delete_contrato: (id) => ipcRenderer.invoke("delete:Contrato", id),
  get_formasPago: () => ipcRenderer.invoke("get:FormasPago"),
  get_formaPago: (id) => ipcRenderer.invoke("get:Contrato", id),
  update_formaPago: (id, formaPago) => ipcRenderer.invoke("update:Contrato", id, formaPago),
  create_formaPago: (formaPago) => ipcRenderer.invoke("create:Contrato", formaPago),
  delete_formaPago: (id) => ipcRenderer.invoke("delete:Contrato", id),
  get_clientesResumen: () => ipcRenderer.invoke("get:ClientesResumen"),
  get_motosResumen: () => ipcRenderer.invoke("get:MotosResumen"),
  get_contratosResumen: () => ipcRenderer.invoke("get:ContratosResumen"),
  get_situacionMotos: () => ipcRenderer.invoke("get:SituacionMotos"),
  get_clientesIncumplidores: () => ipcRenderer.invoke("get:ClientesIncumplidores"),
  get_resumenMarcasModelos: () => ipcRenderer.invoke("get:ResumenMarcasModelos"),
  get_resumenMarcasModelosMunicipio: () => ipcRenderer.invoke("get:ResumenMarcasModelosMunicipio"),
  get_resumenAnual: () => ipcRenderer.invoke("get:ResumenAnual"),
  printHello: () => ipcRenderer.send("print-hello"),
  openFile: () => ipcRenderer.invoke("dialog:openFile"),
  say_hello: (hola) => ipcRenderer.invoke("say:hello", hola)
  // say_hello: (hola) => ipcRenderer.send('say:hello', hola),
});
contextBridge.exposeInMainWorld("nodeApi", "Prueba");
contextBridge.exposeInMainWorld("nodeApi2", {
  foo: "eres gay"
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vcHJlbG9hZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGNvbnRleHRCcmlkZ2UsIGlwY1JlbmRlcmVyIH0gPSByZXF1aXJlKCdlbGVjdHJvbicpXHJcblxyXG5jb250ZXh0QnJpZGdlLmV4cG9zZUluTWFpbldvcmxkKCdlbGVjdHJvbkFQSScsIHtcclxuICAgIHNldFRpdGxlOiAodGl0bGUpID0+IGlwY1JlbmRlcmVyLnNlbmQoJ3NldC10aXRsZScsIHRpdGxlKSxcclxuICAgIGdldF9tYXJjYXM6ICgpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZ2V0Ok1hcmNhcycpLFxyXG4gICAgZ2V0X21hcmNhOiAoaWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZ2V0Ok1hcmNhJywgaWQpLFxyXG4gICAgdXBkYXRlX21hcmNhOiAoaWQsIG1hcmNhKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ3VwZGF0ZTpNYXJjYScsIGlkLCBtYXJjYSksXHJcbiAgICBjcmVhdGVfbWFyY2E6IChtYXJjYSkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdjcmVhdGU6TWFyY2EnLCBtYXJjYSksXHJcbiAgICBkZWxldGVfbWFyY2E6IChpZCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdkZWxldGU6TWFyY2EnLCBpZCksXHJcblxyXG4gICAgZ2V0X3JvbGVzOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldDpSb2xlcycpLFxyXG4gICAgZ2V0X3JvbDogKGlkKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldDpSb2wnLCBpZCksXHJcbiAgICB1cGRhdGVfcm9sOiAoaWQsIHJvbCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCd1cGRhdGU6Um9sJywgaWQsIHJvbCksXHJcbiAgICBjcmVhdGVfcm9sOiAocm9sKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2NyZWF0ZTpSb2wnLCByb2wpLFxyXG4gICAgZGVsZXRlX3JvbDogKGlkKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2RlbGV0ZTpSb2wnLCBpZCksXHJcblxyXG4gICAgZ2V0X3VzdWFyaW9zOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldDpVc3VhcmlvcycpLFxyXG4gICAgZ2V0X3VzdWFyaW86IChpZCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdnZXQ6VXN1YXJpbycsIGlkKSxcclxuICAgIGNvbmZpcm1fdXN1YXJpbzogKCB1c3VhcmlvICkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdjb25maXJtOlVzdWFyaW8nLCB1c3VhcmlvKSxcclxuICAgIHVwZGF0ZV91c3VhcmlvOiAoaWQsIHVzdWFyaW8pID0+IGlwY1JlbmRlcmVyLmludm9rZSgndXBkYXRlOlVzdWFyaW8nLCBpZCwgdXN1YXJpbyksXHJcbiAgICBjcmVhdGVfdXN1YXJpbzogKHVzdWFyaW8pID0+IGlwY1JlbmRlcmVyLmludm9rZSgnY3JlYXRlOlVzdWFyaW8nLCB1c3VhcmlvKSxcclxuICAgIGRlbGV0ZV91c3VhcmlvOiAoaWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZGVsZXRlOlVzdWFyaW8nLCBpZCksXHJcblxyXG4gICAgZ2V0X211bmljaXBpb3M6ICgpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZ2V0Ok11bmljaXBpb3MnKSxcclxuICAgIGdldF9tdW5pY2lwaW86IChpZCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdnZXQ6TXVuaWNpcGlvJywgaWQpLFxyXG4gICAgdXBkYXRlX211bmljaXBpbzogKGlkLCBtdW5pY2lwaW8pID0+IGlwY1JlbmRlcmVyLmludm9rZSgndXBkYXRlOk11bmljaXBpbycsIGlkLCBtdW5pY2lwaW8pLFxyXG4gICAgY3JlYXRlX211bmljaXBpbzogKG11bmljaXBpbykgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdjcmVhdGU6TXVuaWNpcGlvJywgbXVuaWNpcGlvKSxcclxuICAgIGRlbGV0ZV9tdW5pY2lwaW86IChpZCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdkZWxldGU6TXVuaWNpcGlvJywgaWQpLFxyXG5cclxuICAgIGdldF9tb2RlbG9zOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldDpNb2RlbG9zJyksXHJcbiAgICBnZXRfbW9kZWxvc19tYXJjYTogKGlkKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldDpNb2RlbG9zTWFyY2EnLCBpZCksXHJcbiAgICBnZXRfbW9kZWxvOiAoaWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZ2V0Ok1vZGVsbycsIGlkKSxcclxuICAgIHVwZGF0ZV9tb2RlbG86IChpZCwgbW9kZWxvKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ3VwZGF0ZTpNb2RlbG8nLCBpZCwgbW9kZWxvKSxcclxuICAgIGNyZWF0ZV9tb2RlbG86IChtb2RlbG8pID0+IGlwY1JlbmRlcmVyLmludm9rZSgnY3JlYXRlOk1vZGVsbycsIG1vZGVsbyksXHJcbiAgICBkZWxldGVfbW9kZWxvOiAoaWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZGVsZXRlOk1vZGVsbycsIGlkKSxcclxuXHJcbiAgICBnZXRfbW90b3M6ICgpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZ2V0Ok1vdG9zJyksXHJcbiAgICBnZXRfbW90b3NEaXNwb25pYmxlczogKCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdnZXQ6TW90b3NEaXNwb25pYmxlcycpLFxyXG4gICAgZ2V0X21vdG86IChpZCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdnZXQ6TW90bycsIGlkKSxcclxuICAgIHVwZGF0ZV9tb3RvOiAoaWQsIG1vdG8pID0+IGlwY1JlbmRlcmVyLmludm9rZSgndXBkYXRlOk1vdG8nLCBpZCwgbW90byksXHJcbiAgICBjcmVhdGVfbW90bzogKG1vdG8pID0+IGlwY1JlbmRlcmVyLmludm9rZSgnY3JlYXRlOk1vdG8nLCBtb3RvKSxcclxuICAgIGRlbGV0ZV9tb3RvOiAoaWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZGVsZXRlOk1vdG8nLCBpZCksXHJcblxyXG4gICAgZ2V0X2NvbnRyYXRvczogKCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdnZXQ6Q29udHJhdG9zJyksXHJcbiAgICBnZXRfY29udHJhdG86IChpZCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdnZXQ6Q29udHJhdG8nLCBpZCksXHJcbiAgICBnZXRfY29udHJhdG9zRGVDbGllbnRlOiAoaWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZ2V0OkNvbnRyYXRvc0RlQ2xpZW50ZScsIGlkKSxcclxuICAgIHVwZGF0ZV9jb250cmF0bzogKGlkLCBjb250cmF0bykgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCd1cGRhdGU6Q29udHJhdG8nLCBpZCwgY29udHJhdG8pLFxyXG4gICAgY3JlYXRlX2NvbnRyYXRvOiAoY29udHJhdG8pID0+IGlwY1JlbmRlcmVyLmludm9rZSgnY3JlYXRlOkNvbnRyYXRvJywgY29udHJhdG8pLFxyXG4gICAgZGVsZXRlX2NvbnRyYXRvOiAoaWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZGVsZXRlOkNvbnRyYXRvJywgaWQpLFxyXG5cclxuICAgIGdldF9mb3JtYXNQYWdvOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldDpGb3JtYXNQYWdvJyksXHJcbiAgICBnZXRfZm9ybWFQYWdvOiAoaWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZ2V0OkNvbnRyYXRvJywgaWQpLFxyXG4gICAgdXBkYXRlX2Zvcm1hUGFnbzogKGlkLCBmb3JtYVBhZ28pID0+IGlwY1JlbmRlcmVyLmludm9rZSgndXBkYXRlOkNvbnRyYXRvJywgaWQsIGZvcm1hUGFnbyksXHJcbiAgICBjcmVhdGVfZm9ybWFQYWdvOiAoZm9ybWFQYWdvKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2NyZWF0ZTpDb250cmF0bycsIGZvcm1hUGFnbyksXHJcbiAgICBkZWxldGVfZm9ybWFQYWdvOiAoaWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZGVsZXRlOkNvbnRyYXRvJywgaWQpLFxyXG5cclxuICAgIGdldF9jbGllbnRlc1Jlc3VtZW46ICgpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZ2V0OkNsaWVudGVzUmVzdW1lbicpLFxyXG4gICAgZ2V0X21vdG9zUmVzdW1lbjogKCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdnZXQ6TW90b3NSZXN1bWVuJyksXHJcbiAgICBnZXRfY29udHJhdG9zUmVzdW1lbjogKCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdnZXQ6Q29udHJhdG9zUmVzdW1lbicpLFxyXG4gICAgZ2V0X3NpdHVhY2lvbk1vdG9zOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldDpTaXR1YWNpb25Nb3RvcycpLFxyXG4gICAgZ2V0X2NsaWVudGVzSW5jdW1wbGlkb3JlczogKCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdnZXQ6Q2xpZW50ZXNJbmN1bXBsaWRvcmVzJyksXHJcbiAgICBnZXRfcmVzdW1lbk1hcmNhc01vZGVsb3M6ICgpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZ2V0OlJlc3VtZW5NYXJjYXNNb2RlbG9zJyksXHJcbiAgICBnZXRfcmVzdW1lbk1hcmNhc01vZGVsb3NNdW5pY2lwaW86ICgpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZ2V0OlJlc3VtZW5NYXJjYXNNb2RlbG9zTXVuaWNpcGlvJyksXHJcbiAgICBnZXRfcmVzdW1lbkFudWFsOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldDpSZXN1bWVuQW51YWwnKSxcclxuXHJcbiAgICBwcmludEhlbGxvOiAoKSA9PiBpcGNSZW5kZXJlci5zZW5kKCdwcmludC1oZWxsbycpLFxyXG4gICAgb3BlbkZpbGU6ICgpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZGlhbG9nOm9wZW5GaWxlJyksXHJcbiAgICBzYXlfaGVsbG86IChob2xhKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ3NheTpoZWxsbycsIGhvbGEpLFxyXG4gICAgLy8gc2F5X2hlbGxvOiAoaG9sYSkgPT4gaXBjUmVuZGVyZXIuc2VuZCgnc2F5OmhlbGxvJywgaG9sYSksXHJcblxyXG59KVxyXG5cclxuY29udGV4dEJyaWRnZS5leHBvc2VJbk1haW5Xb3JsZChcIm5vZGVBcGlcIiwgXCJQcnVlYmFcIilcclxuY29udGV4dEJyaWRnZS5leHBvc2VJbk1haW5Xb3JsZChcIm5vZGVBcGkyXCIsIHtcclxuICAgIGZvbzogXCJlcmVzIGdheVwiXHJcbn0pXHJcblxyXG4vLyBjb250ZXh0QnJpZGdlLmV4cG9zZUluTWFpbldvcmxkKCd2ZXJzaW9ucycsIHtcclxuLy8gICAgIG5vZGU6ICgpID0+IHByb2Nlc3MudmVyc2lvbnMubm9kZSxcclxuLy8gICAgIGNocm9tZTogKCkgPT4gcHJvY2Vzcy52ZXJzaW9ucy5jaHJvbWUsXHJcbi8vICAgICBlbGVjdHJvbjogKCkgPT4gcHJvY2Vzcy52ZXJzaW9ucy5lbGVjdHJvblxyXG4vLyAgICAgLy8gd2UgY2FuIGFsc28gZXhwb3NlIHZhcmlhYmxlcywgbm90IGp1c3QgZnVuY3Rpb25zXHJcbi8vIH0pXHJcblxyXG4vLyBjb25zdCB7IGNvbnRleHRCcmlkZ2UgfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJylcclxuLy9cclxuLy8gY29udGV4dEJyaWRnZS5leHBvc2VJbk1haW5Xb3JsZCgndmVyc2lvbnMnLCB7XHJcbi8vICAgICBub2RlOiAoKSA9PiBwcm9jZXNzLnZlcnNpb25zLm5vZGUsXHJcbi8vICAgICBjaHJvbWU6ICgpID0+IHByb2Nlc3MudmVyc2lvbnMuY2hyb21lLFxyXG4vLyAgICAgZWxlY3Ryb246ICgpID0+IHByb2Nlc3MudmVyc2lvbnMuZWxlY3Ryb25cclxuLy8gICAgIC8vIHdlIGNhbiBhbHNvIGV4cG9zZSB2YXJpYWJsZXMsIG5vdCBqdXN0IGZ1bmN0aW9uc1xyXG4vLyB9KVxyXG5cclxuXHJcbi8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xyXG4vLyAgICAgY29uc3QgcmVwbGFjZVRleHQgPSAoc2VsZWN0b3IsIHRleHQpID0+IHtcclxuLy8gICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VsZWN0b3IpXHJcbi8vICAgICAgICAgaWYgKGVsZW1lbnQpIGVsZW1lbnQuaW5uZXJUZXh0ID0gdGV4dFxyXG4vLyAgICAgfVxyXG4vL1xyXG4vLyAgICAgZm9yIChjb25zdCB0eXBlIG9mIFsnY2hyb21lJywgJ25vZGUnLCAnZWxlY3Ryb24nXSkge1xyXG4vLyAgICAgICAgIHJlcGxhY2VUZXh0KGAke3R5cGV9LXZlcnNpb25gLCBwcm9jZXNzLnZlcnNpb25zW3R5cGVdKVxyXG4vLyAgICAgfVxyXG4vLyB9KSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxFQUFFLGVBQWUsZ0JBQWdCLFFBQVEsVUFBVTtBQUV6RCxjQUFjLGtCQUFrQixlQUFlO0FBQUEsRUFDM0MsVUFBVSxDQUFDLFVBQVUsWUFBWSxLQUFLLGFBQWEsS0FBSztBQUFBLEVBQ3hELFlBQVksTUFBTSxZQUFZLE9BQU8sWUFBWTtBQUFBLEVBQ2pELFdBQVcsQ0FBQyxPQUFPLFlBQVksT0FBTyxhQUFhLEVBQUU7QUFBQSxFQUNyRCxjQUFjLENBQUMsSUFBSSxVQUFVLFlBQVksT0FBTyxnQkFBZ0IsSUFBSSxLQUFLO0FBQUEsRUFDekUsY0FBYyxDQUFDLFVBQVUsWUFBWSxPQUFPLGdCQUFnQixLQUFLO0FBQUEsRUFDakUsY0FBYyxDQUFDLE9BQU8sWUFBWSxPQUFPLGdCQUFnQixFQUFFO0FBQUEsRUFFM0QsV0FBVyxNQUFNLFlBQVksT0FBTyxXQUFXO0FBQUEsRUFDL0MsU0FBUyxDQUFDLE9BQU8sWUFBWSxPQUFPLFdBQVcsRUFBRTtBQUFBLEVBQ2pELFlBQVksQ0FBQyxJQUFJLFFBQVEsWUFBWSxPQUFPLGNBQWMsSUFBSSxHQUFHO0FBQUEsRUFDakUsWUFBWSxDQUFDLFFBQVEsWUFBWSxPQUFPLGNBQWMsR0FBRztBQUFBLEVBQ3pELFlBQVksQ0FBQyxPQUFPLFlBQVksT0FBTyxjQUFjLEVBQUU7QUFBQSxFQUV2RCxjQUFjLE1BQU0sWUFBWSxPQUFPLGNBQWM7QUFBQSxFQUNyRCxhQUFh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
